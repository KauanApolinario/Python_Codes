# -*- coding: utf-8 -*-
"""curso_cisco.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e9MKYlC0OPWZfIZgOJBjQOH0yco1tujt
"""

def message():
    print("Entre um valor: ")

message()
a = int(input())
message()
b = int(input())
message()
c = int(input())

def message(what, number):
    print("Entrar", what, "número", number)

message("telefone", 11)
message("preço", 5)
message("número", "número")

def address(street, city, postal_code):
    print("Seu endereço é:", street, "St.,", city, postal_code)

s = input("Street: ")
p_c = input("Código postal: ")
c = input("Cidade: ")
address(s, c, p_c)

def boring_function():
    print("'Modo de tédio' ON.")
    return 123

print("Esta lição é interessante!")
boring_function()
print("Essa aula é chata...")

def is_a_triangle(a, b, c):
 if a + b <= c:
  return False
 if b + c <= a:
  return False
 if c + a <= b:
  return False
  return True


print(is_a_triangle(1, 1, 1))
print(is_a_triangle(1, 1, 3))

def is_a_triangle(a, b, c):
    if a + b <= c or b + c <= a or c + a <= b:
        return False
    return True


print(is_a_triangle(1, 1, 1))
print(is_a_triangle(1, 1, 3))

"""Triângulos e o teorema de Pitágoras"""

def is_a_triangle(a, b, c):
 return a + b > c and b + c > a and c + a > b


a = float(input('Digite o primeiro lado\'s comprimento: '))
b = float(input('Entre no segundo lado\'s comprimento: '))
c = float(input('Entre no terceiro lado\'s comprimento: '))

if is_a_triangle(a, b, c):
 print('Sim, pode ser um triângulo.')
else:
 print('Não, não pode ser um triângulo.')

"""Hipotenusa"""

def is_a_triangle(a, b, c):
    return a + b > c and b + c > a and c + a > b


def is_a_right_triangle(a, b, c):
    if not is_a_triangle(a, b, c):
        return False
    if c > a and c > b:
        return c ** 2 == a ** 2 + b ** 2 if a > b and a > c:
    if a > b and a > c:
        return a ** 2 == b ** 2 + c ** 2
print(is_a_right_triangle(5, 3, 4))
print(is_a_right_triangle(1, 3, 4))

"""Avaliando a área de um triângulo"""

def is_a_triangle(a, b, c):
    return a + b > c and b + c > a and c + a > b


def heron(a, b, c):
    p = (a + b + c) / 2
    return (p * (p - a) * (p - b) * (p - c)) ** 0.5


def area_of_triangle(a, b, c):
    if not is_a_triangle(a, b, c):
        return None
    return heron(a, b, c)


print(area_of_triangle(1., 1., 2. ** .5))

"""4.5.3 Exemplos de funções: Fatoriais"""

def factorial_function(n):
    if n < 0:
        return None
    if n < 2:
        return 1

    product = 1
    for i in range(2, n + 1):
        product *= i
    return product


for n in range(1, 6): # testando
    print(n, factorial_function(n))

"""Números de Fibonacci"""

def fib(n):
    if n < 1:
        return None
    if n < 3:
        return 1

    elem_1 = elem_2 = 1
    the_sum = 0
    for i in range(3, n + 1):
        the_sum = elem_1 + elem_2
        elem_1, elem_2 = elem_2, the_sum
    return the_sum


for n in range(1, 10): # testando
    print(n, "->", fib(n))

"""Tuplas e Dicionarios

"""

my_tuple = (1, 10, 100)

t1 = my_tuple + (1000, 10000)
t2 = my_tuple * 3

print(len(t2))
print(t1)
print(t2)
print(10 in my_tuple)
print(-10 not in my_tuple)

school_class = {}

while True:
 name = input("Digite o nome do aluno: ")
 if name == '':
  break

 score = int(input("Insira a pontuação do aluno (0-10): "))
 if score not in range(0, 11):
  break

 if name in school_class:
  school_class[name] += (score,)
 else:
  school_class[name] = (score,)

for name in sorted(school_class.keys()):
 adding = 0
 counter = 0
 for score in school_class[name]:
  adding += score
  counter += 1
 print(name, ":", adding / counter)

"""Exceções"""

try:
  value= int (input('Insira um número natural:'))
  print('O recíproco de', valor, 'é', 1 / value)
except:
  print('Não sei o que fazer.')

try:
 value = int(input('Digite um número natural: '))
 print('O recíproco de', value, 'é', 1/value)
except ValueError:
 print('Eu não sei o que fazer.')
except ZeroDivisionError:
 print('A divisão por zero não é permitida em nosso Universo.')
except:
 print('algo de estranho aconteceu aqui ... Desculpe! ')

"""Projeto Jogo da Velha"""

from random import randrange


def display_board(board):
    for row in range(3):
        print("+-------" * 3, "+", sep="")
        print("|", end="")
        for col in range(3):
            print(f" {board[row][col]} |", end="")
        print()
    print("+-------" * 3, "+", sep="")


def enter_move(board):
    ok = False  # suposição falsa - precisamos dela para entrar no loop
    while not ok:
        move = input("Digite seu movimento: ")
        ok = len(move) == 1 and move.isdigit() and '1' <= move <= '9'  # a entrada do usuário é válida?
        if not ok:
            print("Movimento ruim - repita sua entrada!")  # não, não é - faça a entrada novamente
            continue
        move = int(move) - 1  # número da célula de 0 a 8
        row = move // 3  # linha da célula
        col = move % 3  # coluna da célula
        sign = board[row][col]  # verifique o quadrado selecionado
        ok = sign not in ['O', 'X']
        if not ok:  # está ocupado - para a entrada novamente
            print("Campo já ocupado - repita sua entrada!")
            continue
    board[row][col] = 'O'  # definir 'O' no quadrado selecionado


def make_list_of_free_fields(board):
    free = []  # a lista está vazia inicialmente
    for row in range(3):  # iterar pelas linhas
        for col in range(3):  # iterar pelas colunas
            if board[row][col] not in ['O', 'X']:  # o celular está livre?
                free.append((row, col))  # sim, é - anexar nova tupla à lista
    return free


def victory_for(board, sgn):
    if sgn == "X":  # estamos procurando por X?
        who = 'me'  # sim - é a lateral do computador
    elif sgn == "O":  # ... ou para O?
        who = 'you'  # sim - é o nosso lado
    else:
        who = None  # nós não deveríamos cair aqui!
    cross1 = cross2 = True  # para diagonais
    for rc in range(3):
        if board[rc][0] == sgn and board[rc][1] == sgn and board[rc][2] == sgn:  # verificar linha rc
            return who
        if board[0][rc] == sgn and board[1][rc] == sgn and board[2][rc] == sgn:  # verificar coluna rc
            return who
        if board[rc][rc] != sgn:  # verificar 1ª diagonal
            cross1 = False
        if board[2 - rc][2 - rc] != sgn:  # verifique 2ª diagonal
            cross2 = False
    if cross1 or cross2:
        return who
    return None


def draw_move(board):
    free = make_list_of_free_fields(board)  # faça uma lista de campos livres
    cnt = len(free)
    if cnt > 0:  # se a lista não estiver vazia, escolha um lugar para 'X' e configure-o
        this = randrange(cnt)
        row, col = free[this]
        board[row][col] = 'X'


board = [[3 * j + i + 1 for i in range(3)] for j in range(3)]  # make an empty board
board[1][1] = 'X'  # definir primeiro 'X' no meio
free = make_list_of_free_fields(board)
human_turn = True  # que turno é agora?
while len(free):
    display_board(board)
    if human_turn:
        enter_move(board)
        victor = victory_for(board, 'O')
    else:
        draw_move(board)
        victor = victory_for(board, 'X')
    if victor is not None:
        break
    human_turn = not human_turn
    free = make_list_of_free_fields(board)

display_board(board)
if victor == 'you':
    print("Você ganhou!")
elif victor == 'me':
    print("Eu venci")
else:
    print("Gravata!")